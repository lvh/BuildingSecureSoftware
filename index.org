#+Title: Building secure software
#+Author: @lvh
#+Email: _@lvh.io

#+OPTIONS: toc:nil reveal_rolling_links:nil num:nil reveal_history:true
#+REVEAL_TRANS: linear
#+REVEAL_THEME: lvh

* Slides

  ~www.lvh.io/BuildingSecureSoftware/~

* Introduction

** Who am I?

   #+ATTR_HTML: :style width:80%
   [[./media/lvh.svg]]

   #+BEGIN_NOTES
   Software engineer (distributed systems, infosec)
   #+END_NOTES

** Rackspace

   #+ATTR_HTML: :style width:60%
   [[./media/rackspace.svg]]

** In this talk

** Not in this talk

   #+ATTR_REVEAL: :frag roll-in
   * Common security bugs
   * Importance of software updates
   * What software to use

* The problem
** All software has bugs
** Some are security bugs
** Security bugs are bad

* Bad news

** No wonder it's broken!

  #+ATTR_REVEAL: :frag roll-in
  * Tools don't work
  * Corps don't care
  * ~.edu~ doesn't educate

** Our tools don't work

   How do I write the unit test for "security"?

*** How do we learn software?

*** We read the docs!

*** Security docs?

    Missing or terrible

*** How else do we learn?

    (Especially without docs)

*** We play with it!

    #+ATTR_REVEAL: :frag roll-in
    1. Install it
    2. Play with it
    3. Learn something
    4. Repeat

    #+BEGIN_NOTES
    If I don't know any Twisted/Django/whatever
    #+END_NOTES

*** Security doesn't work that way

    #+ATTR_REVEAL: :frag roll-in
    1. Install it
    2. Play with it
    3. Get it wrong
    4. Repeat anyway

    #+BEGIN_NOTES
    Million ways to screw it up: all-zero IVs, unauth enc...
    Crypto generally doesn't complain when you get it wrong
    #+END_NOTES

*** It /almost/ works that way

    #+ATTR_REVEAL: :frag roll-in
    1. Install software
    2. Try to break it
    3. Learn something
    4. Repeat

*** We're not trained to think that way

    * Make it work, not make it fail
    * Often (not always) pretty hard
    * Issues usually not obvious

*** We're not /paid/ to think that way

    Who regularly gets to do e.g. pentesting?

** Most corps don't care

   #+ATTR_REVEAL: :frag roll-in
   * (Assuming they know; they usually don't)
   * New features > fixing security bugs
   * Security ranks even lower than tech debt
   * At least devs know about tech debt...

*** Time bombs

   Maybe they'll never go off! Right?!

*** Sometimes they do

   Billions of USD yearly

*** Still doesn't matter

   #+ATTR_REVEAL: :frag roll-in
   * Companies usually not liable
   * Execs rarely held accountable
   * Little/no effect on bottom line

*** Sony

   #+ATTR_HTML: :style width:80%
   [[./media/SonyMarketCap.png]]

*** Most corps don't care

   They can afford not to.

** Abstinence-only education
*** What /do/ we teach?
*** Liskov substitution

   #+ATTR_REVEAL: :frag roll-in
   (∀ x: T(x) → p(x))

   #+ATTR_REVEAL: :frag roll-in
   → (∀ S: (T ⊃ S) → (∀ y: S(y) → p(y)))

   #+BEGIN_NOTES
   Taught in every intro to (OO) programming
   #+END_NOTES

*** What /don't/ we teach?
*** Least authority

   #+ATTR_REVEAL: :frag roll-in
   Don't give stuff more power than it needs.

   #+BEGIN_NOTES
   Generally not taught except in specialized majors
   Majors not available at most universities
   #+END_NOTES

*** /(extensive handwaving)/

   #+BEGIN_NOTES
   Don't mean to bash LSP, certainly not Barbara Liskov
   Does wonderful work in CS, particularly distributed systems
   Beyond question one of the great minds of CS

   Very formal LSP description, very informal POLA description

   Ignores that universities are supposed to be about research, not minting programmers
   #+END_NOTES

*** POLA > LSP

   #+BEGIN_NOTES
   If we taught POLA instead of LSP, we'd be way better off
   Plenty of programmers don't know about LSP, write software that violates it, but works fine
   IF you don't know about POLA it's basically always a security problem
   #+END_NOTES

** Security is not a priority

   (Not in business, not in education...)

*** ⊢
*** Don't be a jerk to your coworkers about infosec
*** Don't be a jerk about infosec
*** Don't be a jerk
*** Don't

    #+BEGIN_NOTES
    Just... don't.
    #+END_NOTES

* Good news

** Problems are not set in stone

   * Education is fixable
     * Teach people new tricks
     * Maybe even fix ~.edu~
   * Public education

** Some tools do work

   (mostly by accident)

*** Channeling Glyph

    programming /n/: local understanding

*** Applied to systems

    small composed pieces > large monoliths

*** No implications

    #+ATTR_REVEAL: :frag roll-in
    * Microservices ↛ security bliss
    * Monolithic services ↛ security issues

*** Poorly structured programs

    [[./media/PoorlyStructuredMonolith.png]]

*** Few certainties

    #+ATTR_REVEAL: :frag roll-in
    * death ∧ taxes
    * software → problems

*** Microservices

    * Yes, when split by authority
    * Arbitrary splits can make it worse
    * Larger attack surface, because:
      * More communication
      * More programming environments

*** Code review

    * Best thing after a bug tracker
    * Disseminate experience
    * Cultivate culture of quality

*** Automated testing

    A lot /can/ be automated, e.g.,

    * Behavior against bogus certificates
    * Unit tests that check middleware
    * ...

** Not /all/ corps

   [[./media/NotAllCorps.jpg]]

*** Some employers do care

    * Particularly if tech & service are core business
    * I work on security full-time at Rackspace
    * Google, Heroku... all have excellent teams
    * This does not fix our systemic industry problems

*** Conway's law

    * Software mimics organization
    * If security is an afterthought...

** Open source!

   Shape minds not on the org chart

* Conversations about security
** Some vocabulary

*** Attack model

    How /will/ they attack the system?

*** Attack surface

    How /can/ they attack the system?

** Channeling Zooko

   Security is...

   #+ATTR_REVEAL: :frag roll-in
   * not perfect vs imperfect
   * not better vs worse
   * /this/ surface vs /that/ surface

** Useful security proposals

   #+ATTR_REVEAL: :frag roll-in
   1. Description
   1. Attack model (+ motivation)
   1. Difference in attack surface
   1. Difference in user experience

*** Attack models

   * What are you protecting against?
   * How is this addressed now?

*** User experience

   * One of the most important aspects
   * Usually completely forgotten about
   * I'm looking at you, PGP

** Example: smartphones

   * Contain everything
   * Need to be protected

*** Lock screen!

    Clearly better than no lock screen

*** Options on my iPhone 6

    * Passcode
    * Fingerprint

*** Options on some other phones

    * Patterns (~ passcode)
    * Face recognition (~ fingerprint)

*** Biometrics

    Hollywood-level technology!

*** Biometrics

    * Key rotation?
    * Separate capabilities?
    * On everything you touch!
    * Faking fingers is tricky

*** Secrets

    * People pick poor ones
    * Shoulder surfing

*** Which one do you pick?

    #+ATTR_HTML: :style width:50%
    [[./media/Fork.svg]]

*** Which one do you pick?

    * Either is better than neither
    * Each has their flaws

*** Threat models!

*** Fifth Amendment

    #+ATTR_REVEAL: :frag roll-in
    * (The American one)
    * (I am aware we're in Canada)

*** Disclaimer

    * Not legal advice (IANAL)
    * Not opsec advice

*** Fifth Amendment

    /[...] nor shall be compelled in any criminal case to be a witness
    against himself, [...]/

    #+BEGIN_NOTES
    Gratuitous gendered language
    #+END_NOTES

*** 5th protects against self-incrimination

    Can't force the secret out of you

*** Fingerprints aren't secret

    * Police can and does take your fingerprint
    * Can force you to unlock your phone

*** Which one is more secure?

    It depends on your threat model!

    * Randos? Probably touch id
    * Cops? Definitely passcode

*** Again, not legal or opsec advice

    * I know what happens when you reset your phone
    * I am trying to illustrate threat models

* Wrap-up
** We have a long way to go
** Thank you!
